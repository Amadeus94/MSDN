/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.LetBinding
import dk.sdu.mmmi.mdsd.math.MathExp
import dk.sdu.mmmi.mdsd.math.MathNumber
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.VarBinding
import dk.sdu.mmmi.mdsd.math.VariableUse
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {
	

	
	
	
	
	static Map<String, Integer> variables;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		/*==========	Added 	================ */

		val math = resource.allContents.filter(MathExp).next	
//		fsa.generateFile("MathExpression.java", math.compile)		
		fsa.generateFile("math_expression/" + math.name+".java", math.compile)		
//	 	fsa.generateFile(e.fullyQualifiedName.toString("/")+".java", math.compile)		

		/*==========	Added 	================ */
		
		
//		val math = resource.allContents.filter(MathExp).next			
//		val result = math.compute
//		result.displayPanel
//		
	}
	

	def compile(MathExp math)'''
		
	package math_expression;
	public class «math.name» {
		
		«FOR variable:math.variables»
			public int «variable.name»;
		«ENDFOR»
		
//	  	private External external;
	  	
//	  	public MathComputation(External external) {
//	    	this.external = external;
//	  	}
		
	  	public void compute() {
	  		«FOR variable:math.variables»
	  		«variable.name» = «variable.expression.compileExpression»;
	  		«ENDFOR»
//	    	x = 2 + 2;
//	    	y = this.external.sqrt(x);
	  	}
		
	  	interface External {
	    	public int sqrt(int n);
	  	}
}
'''
	

	
		
	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	def static compute(MathExp math) {
		variables = new HashMap()
		for(varBinding: math.variables)
			varBinding.computeExpression()
		variables
	}
	
	def static dispatch int computeExpression(VarBinding binding) {
		variables.put(binding.name, binding.expression.computeExpression())
		return variables.get(binding.name)
	}
	
	
	
	// Very smart - Just overload it instead of switch case
	def static dispatch String compileExpression(MathNumber exp) {
		exp.value.toString // not sure if correct way of doing it	
	}

	def static dispatch String compileExpression(Plus exp) {
		return exp.left.compileExpression + ' + ' + exp.right.compileExpression
	}
	
	def static dispatch String CompileExpression(Minus exp) {
		return "" + exp.left.compileExpression + ' - ' + exp.right.compileExpression
	}
	
	def static dispatch String CompileExpression(Mult exp) {
		return "+" + exp.left.compileExpression + ' * ' + exp.right.compileExpression
	}
	
	def static dispatch String CompileExpression(Div exp) {
		return "" + exp.left.compileExpression + ' / ' + exp.right.compileExpression
	}

	def static dispatch String CompileExpression(LetBinding exp) {
		return "" + exp.body.compileExpression // No idea
	}
	
	def static dispatch String CompileExpression(VariableUse exp) {
		val ref = exp.ref
		switch ref{
//			Varbinding: exp.ref.name
//			LetBinding: 'let'
		}
		
//		exp.ref.computeBinding
		""
	}

	
	
	
	
	// Very smart - Just overload it instead of switch case
	def static dispatch int computeExpression(MathNumber exp) {
		exp.value
	}

	def static dispatch int computeExpression(Plus exp) {
		exp.left.computeExpression + exp.right.computeExpression
	}
	
	def static dispatch int computeExpression(Minus exp) {
		exp.left.computeExpression - exp.right.computeExpression
	}
	
	def static dispatch int computeExpression(Mult exp) {
		exp.left.computeExpression * exp.right.computeExpression
	}
	
	def static dispatch int computeExpression(Div exp) {
		exp.left.computeExpression / exp.right.computeExpression
	}

	def static dispatch int computeExpression(LetBinding exp) {
		exp.body.computeExpression
	}
	
	def static dispatch int computeExpression(VariableUse exp) {
		exp.ref.computeBinding
	}

	def static dispatch int computeBinding(VarBinding binding){
		if(!variables.containsKey(binding.name))
			binding.computeExpression()			
		variables.get(binding.name)
	}
	
	def static dispatch int computeBinding(LetBinding binding){
		binding.binding.computeExpression
	}
	
}

