/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Binding;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.Function;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Paranthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("math_expression/");
    String _firstUpper = StringExtensions.toFirstUpper(math.getName());
    _builder.append(_firstUpper);
    _builder.append(".java");
    fsa.generateFile(_builder.toString(), this.compile(math));
  }
  
  public CharSequence compile(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class ");
    String _name = math.getName();
    _builder.append(_name, "\t");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<VarBinding> _variables = math.getVariables();
      for(final VarBinding variable : _variables) {
        _builder.append("\t\t");
        _builder.append("public int ");
        String _name_1 = variable.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Function> _functions = math.getFunctions();
      for(final Function variable_1 : _functions) {
        _builder.append("\t\t");
        _builder.append("public int ");
        String _name_2 = variable_1.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("//\t  \tprivate External external;");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("//\t  \tpublic MathComputation(External external) {");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("//\t    \tthis.external = external;");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("//\t  \t}");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.newLine();
    {
      EList<Function> _functions_1 = math.getFunctions();
      for(final Function function : _functions_1) {
        _builder.append("\t  \t");
        _builder.append("private ");
        String _name_3 = function.getName();
        _builder.append(_name_3, "\t  \t");
        _builder.append(" ");
        String _name_4 = function.getName();
        _builder.append(_name_4, "\t  \t");
        _builder.append("2\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t  \t");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.newLine();
    {
      EList<VarBinding> _variables_1 = math.getVariables();
      for(final VarBinding variable_2 : _variables_1) {
        _builder.append("\t  \t");
        _builder.append("mahthpublic int ");
        String _name_5 = variable_2.getName();
        _builder.append(_name_5, "\t  \t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t  \t");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("public void compute() {");
    _builder.newLine();
    {
      EList<VarBinding> _variables_2 = math.getVariables();
      for(final VarBinding variable_3 : _variables_2) {
        _builder.append("\t  \t\t");
        String _name_6 = variable_3.getName();
        _builder.append(_name_6, "\t  \t\t");
        _builder.append(" = ");
        String _compileExpression = MathGenerator.compileExpression(variable_3.getExpression());
        _builder.append(_compileExpression, "\t  \t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("//\t    \ty = this.external.sqrt(x);");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("interface External {");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("public int sqrt(int n);");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected static String _compileExpression(final MathNumber exp) {
    return Integer.valueOf(exp.getValue()).toString();
  }
  
  protected static String _compileExpression(final Plus exp) {
    String _compileExpression = MathGenerator.compileExpression(exp.getLeft());
    String _plus = (_compileExpression + " + ");
    String _compileExpression_1 = MathGenerator.compileExpression(exp.getRight());
    return (_plus + _compileExpression_1);
  }
  
  protected static String _compileExpression(final Minus exp) {
    String _compileExpression = MathGenerator.compileExpression(exp.getLeft());
    String _plus = (_compileExpression + " - ");
    String _compileExpression_1 = MathGenerator.compileExpression(exp.getRight());
    return (_plus + _compileExpression_1);
  }
  
  protected static String _compileExpression(final Mult exp) {
    String _compileExpression = MathGenerator.compileExpression(exp.getLeft());
    String _plus = (_compileExpression + " * ");
    String _compileExpression_1 = MathGenerator.compileExpression(exp.getRight());
    return (_plus + _compileExpression_1);
  }
  
  protected static String _compileExpression(final Div exp) {
    String _compileExpression = MathGenerator.compileExpression(exp.getLeft());
    String _plus = (_compileExpression + " / ");
    String _compileExpression_1 = MathGenerator.compileExpression(exp.getRight());
    return (_plus + _compileExpression_1);
  }
  
  protected static String _compileExpression(final Paranthesis expr) {
    String _compileExpression = MathGenerator.compileExpression(expr.getExp());
    String _plus = ("(" + _compileExpression);
    return (_plus + ")");
  }
  
  protected static String _compileExpression(final LetBinding exp) {
    return MathGenerator.compileExpression(exp.getBody());
  }
  
  protected static String _compileExpression(final VariableUse varUse) {
    final Binding ref = varUse.getRef();
    boolean _matched = false;
    if (ref instanceof VarBinding) {
      _matched=true;
      return varUse.getRef().getName();
    }
    if (!_matched) {
      if (ref instanceof LetBinding) {
        _matched=true;
        return MathGenerator.compileExpression(((LetBinding)ref).getBinding());
      }
    }
    return null;
  }
  
  public static String compileExpression(final Expression exp) {
    if (exp instanceof Div) {
      return _compileExpression((Div)exp);
    } else if (exp instanceof LetBinding) {
      return _compileExpression((LetBinding)exp);
    } else if (exp instanceof MathNumber) {
      return _compileExpression((MathNumber)exp);
    } else if (exp instanceof Minus) {
      return _compileExpression((Minus)exp);
    } else if (exp instanceof Mult) {
      return _compileExpression((Mult)exp);
    } else if (exp instanceof Paranthesis) {
      return _compileExpression((Paranthesis)exp);
    } else if (exp instanceof Plus) {
      return _compileExpression((Plus)exp);
    } else if (exp instanceof VariableUse) {
      return _compileExpression((VariableUse)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
}
